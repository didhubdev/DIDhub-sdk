/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockERC721,
  MockERC721Interface,
} from "./ERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200192b3803806200192b833981016040819052620000349162000251565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000313565b8280546200007c90620002e3565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000152576200015262000114565b6040525050565b60006200016560405190565b90506200017382826200012a565b919050565b60006001600160401b0382111562000194576200019462000114565b601f19601f83011660200192915050565b60005b83811015620001c2578181015183820152602001620001a8565b83811115620001d2576000848401525b50505050565b6000620001ef620001e98462000178565b62000159565b9050828152602081018484840111156200020c576200020c600080fd5b62000219848285620001a5565b509392505050565b600082601f830112620002375762000237600080fd5b815162000249848260208601620001d8565b949350505050565b60008060408385031215620002695762000269600080fd5b82516001600160401b03811115620002845762000284600080fd5b620002928582860162000221565b602085015190935090506001600160401b03811115620002b557620002b5600080fd5b620002c38582860162000221565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002f857607f821691505b6020821081036200030d576200030d620002cd565b50919050565b61160880620003236000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342966c6811610097578063a22cb46511610066578063a22cb465146101f4578063b88d4fde14610207578063c87b56dd1461021a578063e985e9c51461022d57600080fd5b806342966c68146101a65780636352211e146101b957806370a08231146101cc57806395d89b41146101ec57600080fd5b8063095ea7b3116100d3578063095ea7b31461015857806323b872dd1461016d57806340c10f191461018057806342842e0e1461019357600080fd5b806301ffc9a7146100fa57806306fdde0314610123578063081812fc14610138575b600080fd5b61010d610108366004610d7a565b610240565b60405161011a9190610da5565b60405180910390f35b61012b610292565b60405161011a9190610e11565b61014b610146366004610e33565b610324565b60405161011a9190610e6e565b61016b610166366004610e90565b61034b565b005b61016b61017b366004610ecd565b6103d9565b61016b61018e366004610e90565b61040a565b61016b6101a1366004610ecd565b610418565b61016b6101b4366004610e33565b610433565b61014b6101c7366004610e33565b61043f565b6101df6101da366004610f1d565b610474565b60405161011a9190610f44565b61012b6104b8565b61016b610202366004610f65565b6104c7565b61016b61021536600461108b565b6104d2565b61012b610228366004610e33565b61050a565b61010d61023b36600461110a565b61057e565b60006001600160e01b031982166380ac58cd60e01b148061027157506001600160e01b03198216635b5e139f60e01b145b8061028c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102a190611153565b80601f01602080910402602001604051908101604052809291908181526020018280546102cd90611153565b801561031a5780601f106102ef5761010080835404028352916020019161031a565b820191906000526020600020905b8154815290600101906020018083116102fd57829003601f168201915b5050505050905090565b600061032f826105ac565b506000908152600460205260409020546001600160a01b031690565b60006103568261043f565b9050806001600160a01b0316836001600160a01b0316036103925760405162461bcd60e51b8152600401610389906111bd565b60405180910390fd5b336001600160a01b03821614806103ae57506103ae813361057e565b6103ca5760405162461bcd60e51b815260040161038990611225565b6103d483836105e0565b505050565b6103e3338261064e565b6103ff5760405162461bcd60e51b81526004016103899061127d565b6103d48383836106ad565b61041482826107e2565b5050565b6103d4838383604051806020016040528060008152506104d2565b61043c816108eb565b50565b6000818152600260205260408120546001600160a01b03168061028c5760405162461bcd60e51b8152600401610389906112c1565b60006001600160a01b03821661049c5760405162461bcd60e51b815260040161038990611315565b506001600160a01b031660009081526003602052604090205490565b6060600180546102a190611153565b61041433838361098e565b6104dc338361064e565b6104f85760405162461bcd60e51b81526004016103899061127d565b61050484848484610a30565b50505050565b6060610515826105ac565b600061052c60408051602081019091526000815290565b9050600081511161054c5760405180602001604052806000815250610577565b8061055684610a63565b604051602001610567929190611347565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260409020546001600160a01b031661043c5760405162461bcd60e51b8152600401610389906112c1565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906106158261043f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061065a8361043f565b9050806001600160a01b0316846001600160a01b031614806106815750610681818561057e565b806106a55750836001600160a01b031661069a84610324565b6001600160a01b0316145b949350505050565b826001600160a01b03166106c08261043f565b6001600160a01b0316146106e65760405162461bcd60e51b81526004016103899061139d565b6001600160a01b03821661070c5760405162461bcd60e51b8152600401610389906113ec565b6107198383836001610af7565b826001600160a01b031661072c8261043f565b6001600160a01b0316146107525760405162461bcd60e51b81526004016103899061139d565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166108085760405162461bcd60e51b81526004016103899061142c565b6000818152600260205260409020546001600160a01b03161561083d5760405162461bcd60e51b81526004016103899061146e565b61084b600083836001610af7565b6000818152600260205260409020546001600160a01b0316156108805760405162461bcd60e51b81526004016103899061146e565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006108f68261043f565b9050610906816000846001610af7565b61090f8261043f565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b0316036109bf5760405162461bcd60e51b8152600401610389906114b0565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610a23908590610da5565b60405180910390a3505050565b610a3b8484846106ad565b610a4784848484610b7f565b6105045760405162461bcd60e51b81526004016103899061150d565b60606000610a7083610c80565b600101905060008167ffffffffffffffff811115610a9057610a90610f98565b6040519080825280601f01601f191660200182016040528015610aba576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ac4575b509392505050565b6001811115610504576001600160a01b03841615610b3d576001600160a01b03841660009081526003602052604081208054839290610b37908490611533565b90915550505b6001600160a01b03831615610504576001600160a01b03831660009081526003602052604081208054839290610b7490849061154a565b909155505050505050565b60006001600160a01b0384163b15610c7557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610bc3903390899088908890600401611562565b6020604051808303816000875af1925050508015610bfe575060408051601f3d908101601f19168201909252610bfb918101906115b1565b60015b610c5b573d808015610c2c576040519150601f19603f3d011682016040523d82523d6000602084013e610c31565b606091505b508051600003610c535760405162461bcd60e51b81526004016103899061150d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506106a5565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610cbf5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610ceb576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d0957662386f26fc10000830492506010015b6305f5e1008310610d21576305f5e100830492506008015b6127108310610d3557612710830492506004015b60648310610d47576064830492506002015b600a831061028c5760010192915050565b6001600160e01b031981165b811461043c57600080fd5b803561028c81610d58565b600060208284031215610d8f57610d8f600080fd5b60006106a58484610d6f565b8015155b82525050565b6020810161028c8284610d9b565b60005b83811015610dce578181015183820152602001610db6565b838111156105045750506000910152565b6000610de9825190565b808452602084019350610e00818560208601610db3565b601f01601f19169290920192915050565b602080825281016105778184610ddf565b80610d64565b803561028c81610e22565b600060208284031215610e4857610e48600080fd5b60006106a58484610e28565b60006001600160a01b03821661028c565b610d9f81610e54565b6020810161028c8284610e65565b610d6481610e54565b803561028c81610e7c565b60008060408385031215610ea657610ea6600080fd5b6000610eb28585610e85565b9250506020610ec385828601610e28565b9150509250929050565b600080600060608486031215610ee557610ee5600080fd5b6000610ef18686610e85565b9350506020610f0286828701610e85565b9250506040610f1386828701610e28565b9150509250925092565b600060208284031215610f3257610f32600080fd5b60006106a58484610e85565b80610d9f565b6020810161028c8284610f3e565b801515610d64565b803561028c81610f52565b60008060408385031215610f7b57610f7b600080fd5b6000610f878585610e85565b9250506020610ec385828601610f5a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610fd457610fd4610f98565b6040525050565b6000610fe660405190565b9050610ff28282610fae565b919050565b600067ffffffffffffffff82111561101157611011610f98565b601f19601f83011660200192915050565b82818337506000910152565b600061104161103c84610ff7565b610fdb565b90508281526020810184848401111561105c5761105c600080fd5b610aef848285611022565b600082601f83011261107b5761107b600080fd5b81356106a584826020860161102e565b600080600080608085870312156110a4576110a4600080fd5b60006110b08787610e85565b94505060206110c187828801610e85565b93505060406110d287828801610e28565b925050606085013567ffffffffffffffff8111156110f2576110f2600080fd5b6110fe87828801611067565b91505092959194509250565b6000806040838503121561112057611120600080fd5b600061112c8585610e85565b9250506020610ec385828601610e85565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061116757607f821691505b6020821081036111795761117961113d565b50919050565b60218152602081017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b602082015290505b60400190565b6020808252810161028c8161117f565b603d8152602081017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015290506111b7565b6020808252810161028c816111cd565b602d8152602081017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526c1c881bdc88185c1c1c9bdd9959609a1b602082015290506111b7565b6020808252810161028c81611235565b60188152602081017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815290505b60200190565b6020808252810161028c8161128d565b60298152602081017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b602082015290506111b7565b6020808252810161028c816112d1565b600061132f825190565b61133d818560208601610db3565b9290920192915050565b6113518184611325565b90506105778183611325565b60258152602081017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b602082015290506111b7565b6020808252810161028c8161135d565b60248152602081017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b602082015290506111b7565b6020808252810161028c816113ad565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526112bb565b6020808252810161028c816113fc565b601c8152602081017f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000815290506112bb565b6020808252810161028c8161143c565b60198152602081017f4552433732313a20617070726f766520746f2063616c6c657200000000000000815290506112bb565b6020808252810161028c8161147e565b60328152602081017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b602082015290506111b7565b6020808252810161028c816114c0565b634e487b7160e01b600052601160045260246000fd5b6000828210156115455761154561151d565b500390565b6000821982111561155d5761155d61151d565b500190565b608081016115708287610e65565b61157d6020830186610e65565b61158a6040830185610f3e565b818103606083015261159c8184610ddf565b9695505050505050565b805161028c81610d58565b6000602082840312156115c6576115c6600080fd5b60006106a584846115a656fea264697066735822122089c28fefff5f73667e09a60f2c3f338061f15cb3f777ef27122c4dd1815d31e964736f6c634300080d0033";

type MockERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721__factory extends ContractFactory {
  constructor(...args: MockERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      MockERC721 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC721__factory {
    return super.connect(runner) as MockERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721Interface {
    return new Interface(_abi) as MockERC721Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC721 {
    return new Contract(address, _abi, runner) as unknown as MockERC721;
  }
}
