/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "./ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f8938038062000f89833981016040819052620000349162000251565b8151829082906200004d9060039060208501906200006e565b508051620000639060049060208401906200006e565b505050505062000313565b8280546200007c90620002e3565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b038111828210171562000152576200015262000114565b6040525050565b60006200016560405190565b90506200017382826200012a565b919050565b60006001600160401b0382111562000194576200019462000114565b601f19601f83011660200192915050565b60005b83811015620001c2578181015183820152602001620001a8565b83811115620001d2576000848401525b50505050565b6000620001ef620001e98462000178565b62000159565b9050828152602081018484840111156200020c576200020c600080fd5b62000219848285620001a5565b509392505050565b600082601f830112620002375762000237600080fd5b815162000249848260208601620001d8565b949350505050565b60008060408385031215620002695762000269600080fd5b82516001600160401b03811115620002845762000284600080fd5b620002928582860162000221565b602085015190935090506001600160401b03811115620002b557620002b5600080fd5b620002c38582860162000221565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b600281046001821680620002f857607f821691505b6020821081036200030d576200030d620002cd565b50919050565b610c6680620003236000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c57806395d89b411161006657806395d89b41146101a9578063a457c2d7146101b1578063a9059cbb146101c4578063dd62ed3e146101d757600080fd5b806340c10f191461015857806342966c681461016d57806370a082311461018057600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011257806323b872dd14610123578063313ce567146101365780633950935114610145575b600080fd5b6100dc6101ea565b6040516100e9919061071e565b60405180910390f35b610105610100366004610777565b61027c565b6040516100e991906107be565b6002545b6040516100e991906107d2565b6101056101313660046107e0565b610296565b60126040516100e99190610839565b610105610153366004610777565b6102ba565b61016b610166366004610777565b6102dc565b005b61016b61017b366004610847565b6102ea565b61011661018e366004610870565b6001600160a01b031660009081526020819052604090205490565b6100dc6102f7565b6101056101bf366004610777565b610306565b6101056101d2366004610777565b61034c565b6101166101e5366004610891565b61035a565b6060600380546101f9906108da565b80601f0160208091040260200160405190810160405280929190818152602001828054610225906108da565b80156102725780601f1061024757610100808354040283529160200191610272565b820191906000526020600020905b81548152906001019060200180831161025557829003601f168201915b5050505050905090565b60003361028a818585610385565b60019150505b92915050565b6000336102a4858285610439565b6102af858585610483565b506001949350505050565b60003361028a8185856102cd838361035a565b6102d7919061091c565b610385565b6102e68282610573565b5050565b6102f43382610609565b50565b6060600480546101f9906108da565b60003381610314828661035a565b90508381101561033f5760405162461bcd60e51b815260040161033690610976565b60405180910390fd5b6102af8286868403610385565b60003361028a818585610483565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ab5760405162461bcd60e51b8152600401610336906109c5565b6001600160a01b0382166103d15760405162461bcd60e51b815260040161033690610a12565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061042c9085906107d2565b60405180910390a3505050565b6000610445848461035a565b9050600019811461047d57818110156104705760405162461bcd60e51b815260040161033690610a56565b61047d8484848403610385565b50505050565b6001600160a01b0383166104a95760405162461bcd60e51b815260040161033690610aa6565b6001600160a01b0382166104cf5760405162461bcd60e51b815260040161033690610af4565b6001600160a01b038316600090815260208190526040902054818110156105085760405162461bcd60e51b815260040161033690610b45565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105669086906107d2565b60405180910390a361047d565b6001600160a01b0382166105995760405162461bcd60e51b815260040161033690610b87565b80600260008282546105ab919061091c565b90915550506001600160a01b038216600081815260208190526040808220805485019055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105fd9085906107d2565b60405180910390a35050565b6001600160a01b03821661062f5760405162461bcd60e51b815260040161033690610bd3565b6001600160a01b038216600090815260208190526040902054818110156106685760405162461bcd60e51b815260040161033690610c20565b6001600160a01b0383166000818152602081905260408082208585039055600280548690039055519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061042c9086906107d2565b60005b838110156106db5781810151838201526020016106c3565b8381111561047d5750506000910152565b60006106f6825190565b80845260208401935061070d8185602086016106c0565b601f01601f19169290920192915050565b6020808252810161072f81846106ec565b9392505050565b60006001600160a01b038216610290565b61075081610736565b81146102f457600080fd5b803561029081610747565b80610750565b803561029081610766565b6000806040838503121561078d5761078d600080fd5b6000610799858561075b565b92505060206107aa8582860161076c565b9150509250929050565b8015155b82525050565b6020810161029082846107b4565b806107b8565b6020810161029082846107cc565b6000806000606084860312156107f8576107f8600080fd5b6000610804868661075b565b93505060206108158682870161075b565b92505060406108268682870161076c565b9150509250925092565b60ff81166107b8565b602081016102908284610830565b60006020828403121561085c5761085c600080fd5b6000610868848461076c565b949350505050565b60006020828403121561088557610885600080fd5b6000610868848461075b565b600080604083850312156108a7576108a7600080fd5b60006108b3858561075b565b92505060206107aa8582860161075b565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806108ee57607f821691505b602082108103610900576109006108c4565b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561092f5761092f610906565b500190565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b602082015290505b60400190565b6020808252810161029081610934565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529050610970565b6020808252810161029081610986565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529050610970565b60208082528101610290816109d5565b601d8152602081017f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000815290505b60200190565b6020808252810161029081610a22565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529050610970565b6020808252810161029081610a66565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529050610970565b6020808252810161029081610ab6565b60268152602081017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529050610970565b6020808252810161029081610b04565b601f8152602081017f45524332303a206d696e7420746f20746865207a65726f20616464726573730081529050610a50565b6020808252810161029081610b55565b60218152602081017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b60208201529050610970565b6020808252810161029081610b97565b60228152602081017f45524332303a206275726e20616d6f756e7420657863656564732062616c616e815261636560f01b60208201529050610970565b6020808252810161029081610be356fea26469706673582212206625c1abf63cdfb5607cb83c46e95d24c891ca7705a37b324486496317c1a91664736f6c634300080d0033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
