/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export type IFTStruct = { tokenContract: string; amount: BigNumberish };

export type IFTStructOutput = [string, BigNumber] & {
  tokenContract: string;
  amount: BigNumber;
};

export type INFTStruct = { tokenContract: string; tokenId: BigNumberish };

export type INFTStructOutput = [string, BigNumber] & {
  tokenContract: string;
  tokenId: BigNumber;
};

export type OfferItemStruct = {
  itemType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
};

export type OfferItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  itemType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
};

export type ConsiderationItemStruct = {
  itemType: BigNumberish;
  token: string;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  recipient: string;
};

export type ConsiderationItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  itemType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
  recipient: string;
};

export type OrderParametersStruct = {
  offerer: string;
  zone: string;
  offer: OfferItemStruct[];
  consideration: ConsiderationItemStruct[];
  orderType: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  zoneHash: BytesLike;
  salt: BigNumberish;
  conduitKey: BytesLike;
  totalOriginalConsiderationItems: BigNumberish;
};

export type OrderParametersStructOutput = [
  string,
  string,
  OfferItemStructOutput[],
  ConsiderationItemStructOutput[],
  number,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  offerer: string;
  zone: string;
  offer: OfferItemStructOutput[];
  consideration: ConsiderationItemStructOutput[];
  orderType: number;
  startTime: BigNumber;
  endTime: BigNumber;
  zoneHash: string;
  salt: BigNumber;
  conduitKey: string;
  totalOriginalConsiderationItems: BigNumber;
};

export type AdvancedOrderStruct = {
  parameters: OrderParametersStruct;
  numerator: BigNumberish;
  denominator: BigNumberish;
  signature: BytesLike;
  extraData: BytesLike;
};

export type AdvancedOrderStructOutput = [
  OrderParametersStructOutput,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  parameters: OrderParametersStructOutput;
  numerator: BigNumber;
  denominator: BigNumber;
  signature: string;
  extraData: string;
};

export type CriteriaResolverStruct = {
  orderIndex: BigNumberish;
  side: BigNumberish;
  index: BigNumberish;
  identifier: BigNumberish;
  criteriaProof: BytesLike[];
};

export type CriteriaResolverStructOutput = [
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  string[]
] & {
  orderIndex: BigNumber;
  side: number;
  index: BigNumber;
  identifier: BigNumber;
  criteriaProof: string[];
};

export type FulfillmentComponentStruct = {
  orderIndex: BigNumberish;
  itemIndex: BigNumberish;
}[];

export type FulfillmentComponentStructOutput = ([BigNumber, BigNumber] & {
  orderIndex: BigNumber;
  itemIndex: BigNumber;
})[];

export type SwapPriceStruct = {
  amountOut: BigNumberish;
  amountInMax: BigNumberish;
  tokenContract: string;
};

export type SwapPriceStructOutput = [BigNumber, BigNumber, string] & {
  amountOut: BigNumber;
  amountInMax: BigNumber;
  tokenContract: string;
};

export type SwapInfoStruct = {
  prices: SwapPriceStruct[];
  paymentToken: string;
  paymentMax: BigNumberish;
};

export type SwapInfoStructOutput = [
  SwapPriceStructOutput[],
  string,
  BigNumber
] & {
  prices: SwapPriceStructOutput[];
  paymentToken: string;
  paymentMax: BigNumber;
};

export type DomainPriceInfoStruct = {
  price: BigNumberish;
  tokenContract: string;
};

export type DomainPriceInfoStructOutput = [BigNumber, string] & {
  price: BigNumber;
  tokenContract: string;
};

export interface BatchPurchaseInterface extends utils.Interface {
  functions: {
    "approvedPairs(address,address)": FunctionFragment;
    "batchCheckApprovalERC20((address,uint256)[])": FunctionFragment;
    "batchCheckApprovalERC721orERC1155((address,uint256)[])": FunctionFragment;
    "defaultSwapFee()": FunctionFragment;
    "fulfillAvailableAdvancedListingOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],tuple[][],tuple[][],((uint256,uint256,address)[],address,uint256),bytes32,address,uint256)": FunctionFragment;
    "fulfillAvailableAdvancedListingOrdersERC20(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],tuple[][],tuple[][],((uint256,uint256,address)[],address,uint256),bytes32,address,uint256)": FunctionFragment;
    "fulfillAvailableAdvancedOfferOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],tuple[][],tuple[][],(address,uint256)[],bytes32,address,uint256)": FunctionFragment;
    "getIndividualPrice((uint256,address)[],address)": FunctionFragment;
    "getTotalPrice((uint256,address)[],address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSpecificSwapFee(address,address,uint24)": FunctionFragment;
    "specificSwapFee(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvedPairs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckApprovalERC20",
    values: [IFTStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckApprovalERC721orERC1155",
    values: [INFTStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedListingOrders",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[],
      FulfillmentComponentStruct[],
      SwapInfoStruct,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedListingOrdersERC20",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[],
      FulfillmentComponentStruct[],
      SwapInfoStruct,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedOfferOrders",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[],
      FulfillmentComponentStruct[],
      INFTStruct[],
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndividualPrice",
    values: [DomainPriceInfoStruct[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [DomainPriceInfoStruct[], string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSpecificSwapFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "specificSwapFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckApprovalERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckApprovalERC721orERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedListingOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedListingOrdersERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedOfferOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndividualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpecificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BatchPurchase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchPurchaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    batchCheckApprovalERC20(
      tokens: IFTStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    batchCheckApprovalERC721orERC1155(
      tokens: INFTStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    defaultSwapFee(overrides?: CallOverrides): Promise<[number]>;

    fulfillAvailableAdvancedListingOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillAvailableAdvancedListingOrdersERC20(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillAvailableAdvancedOfferOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      nftFullfillments: INFTStruct[],
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIndividualPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpecificSwapFee(
      tokenIn: string,
      tokenOut: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    specificSwapFee(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvedPairs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  batchCheckApprovalERC20(
    tokens: IFTStruct[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  batchCheckApprovalERC721orERC1155(
    tokens: INFTStruct[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  defaultSwapFee(overrides?: CallOverrides): Promise<number>;

  fulfillAvailableAdvancedListingOrders(
    advancedOrders: AdvancedOrderStruct[],
    criteriaResolvers: CriteriaResolverStruct[],
    offerFulfillments: FulfillmentComponentStruct[],
    considerationFulfillments: FulfillmentComponentStruct[],
    swapInfo: SwapInfoStruct,
    fulfillerConduitKey: BytesLike,
    recipient: string,
    maximumFulfilled: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillAvailableAdvancedListingOrdersERC20(
    advancedOrders: AdvancedOrderStruct[],
    criteriaResolvers: CriteriaResolverStruct[],
    offerFulfillments: FulfillmentComponentStruct[],
    considerationFulfillments: FulfillmentComponentStruct[],
    swapInfo: SwapInfoStruct,
    fulfillerConduitKey: BytesLike,
    recipient: string,
    maximumFulfilled: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillAvailableAdvancedOfferOrders(
    advancedOrders: AdvancedOrderStruct[],
    criteriaResolvers: CriteriaResolverStruct[],
    offerFulfillments: FulfillmentComponentStruct[],
    considerationFulfillments: FulfillmentComponentStruct[],
    nftFullfillments: INFTStruct[],
    fulfillerConduitKey: BytesLike,
    recipient: string,
    maximumFulfilled: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIndividualPrice(
    prices: DomainPriceInfoStruct[],
    paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalPrice(
    prices: DomainPriceInfoStruct[],
    paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpecificSwapFee(
    tokenIn: string,
    tokenOut: string,
    swapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  specificSwapFee(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    batchCheckApprovalERC20(
      tokens: IFTStruct[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    batchCheckApprovalERC721orERC1155(
      tokens: INFTStruct[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    defaultSwapFee(overrides?: CallOverrides): Promise<number>;

    fulfillAvailableAdvancedListingOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillAvailableAdvancedListingOrdersERC20(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillAvailableAdvancedOfferOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      nftFullfillments: INFTStruct[],
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIndividualPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSpecificSwapFee(
      tokenIn: string,
      tokenOut: string,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    specificSwapFee(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCheckApprovalERC20(
      tokens: IFTStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCheckApprovalERC721orERC1155(
      tokens: INFTStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillAvailableAdvancedListingOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillAvailableAdvancedListingOrdersERC20(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillAvailableAdvancedOfferOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      nftFullfillments: INFTStruct[],
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIndividualPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpecificSwapFee(
      tokenIn: string,
      tokenOut: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    specificSwapFee(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCheckApprovalERC20(
      tokens: IFTStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCheckApprovalERC721orERC1155(
      tokens: INFTStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillAvailableAdvancedListingOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillAvailableAdvancedListingOrdersERC20(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      swapInfo: SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillAvailableAdvancedOfferOrders(
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[],
      considerationFulfillments: FulfillmentComponentStruct[],
      nftFullfillments: INFTStruct[],
      fulfillerConduitKey: BytesLike,
      recipient: string,
      maximumFulfilled: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIndividualPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalPrice(
      prices: DomainPriceInfoStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpecificSwapFee(
      tokenIn: string,
      tokenOut: string,
      swapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    specificSwapFee(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
