/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type IFTStruct = { tokenContract: AddressLike; amount: BigNumberish };

export type IFTStructOutput = [tokenContract: string, amount: bigint] & {
  tokenContract: string;
  amount: bigint;
};

export type INFTStruct = { tokenContract: AddressLike; tokenId: BigNumberish };

export type INFTStructOutput = [tokenContract: string, tokenId: bigint] & {
  tokenContract: string;
  tokenId: bigint;
};

export type OfferItemStruct = {
  itemType: BigNumberish;
  token: AddressLike;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
};

export type OfferItemStructOutput = [
  itemType: bigint,
  token: string,
  identifierOrCriteria: bigint,
  startAmount: bigint,
  endAmount: bigint
] & {
  itemType: bigint;
  token: string;
  identifierOrCriteria: bigint;
  startAmount: bigint;
  endAmount: bigint;
};

export type ConsiderationItemStruct = {
  itemType: BigNumberish;
  token: AddressLike;
  identifierOrCriteria: BigNumberish;
  startAmount: BigNumberish;
  endAmount: BigNumberish;
  recipient: AddressLike;
};

export type ConsiderationItemStructOutput = [
  itemType: bigint,
  token: string,
  identifierOrCriteria: bigint,
  startAmount: bigint,
  endAmount: bigint,
  recipient: string
] & {
  itemType: bigint;
  token: string;
  identifierOrCriteria: bigint;
  startAmount: bigint;
  endAmount: bigint;
  recipient: string;
};

export type OrderParametersStruct = {
  offerer: AddressLike;
  zone: AddressLike;
  offer: OfferItemStruct[];
  consideration: ConsiderationItemStruct[];
  orderType: BigNumberish;
  startTime: BigNumberish;
  endTime: BigNumberish;
  zoneHash: BytesLike;
  salt: BigNumberish;
  conduitKey: BytesLike;
  totalOriginalConsiderationItems: BigNumberish;
};

export type OrderParametersStructOutput = [
  offerer: string,
  zone: string,
  offer: OfferItemStructOutput[],
  consideration: ConsiderationItemStructOutput[],
  orderType: bigint,
  startTime: bigint,
  endTime: bigint,
  zoneHash: string,
  salt: bigint,
  conduitKey: string,
  totalOriginalConsiderationItems: bigint
] & {
  offerer: string;
  zone: string;
  offer: OfferItemStructOutput[];
  consideration: ConsiderationItemStructOutput[];
  orderType: bigint;
  startTime: bigint;
  endTime: bigint;
  zoneHash: string;
  salt: bigint;
  conduitKey: string;
  totalOriginalConsiderationItems: bigint;
};

export type AdvancedOrderStruct = {
  parameters: OrderParametersStruct;
  numerator: BigNumberish;
  denominator: BigNumberish;
  signature: BytesLike;
  extraData: BytesLike;
};

export type AdvancedOrderStructOutput = [
  parameters: OrderParametersStructOutput,
  numerator: bigint,
  denominator: bigint,
  signature: string,
  extraData: string
] & {
  parameters: OrderParametersStructOutput;
  numerator: bigint;
  denominator: bigint;
  signature: string;
  extraData: string;
};

export type CriteriaResolverStruct = {
  orderIndex: BigNumberish;
  side: BigNumberish;
  index: BigNumberish;
  identifier: BigNumberish;
  criteriaProof: BytesLike[];
};

export type CriteriaResolverStructOutput = [
  orderIndex: bigint,
  side: bigint,
  index: bigint,
  identifier: bigint,
  criteriaProof: string[]
] & {
  orderIndex: bigint;
  side: bigint;
  index: bigint;
  identifier: bigint;
  criteriaProof: string[];
};

export type FulfillmentComponentStruct = {
  orderIndex: BigNumberish;
  itemIndex: BigNumberish;
};

export type FulfillmentComponentStructOutput = [
  orderIndex: bigint,
  itemIndex: bigint
] & { orderIndex: bigint; itemIndex: bigint };

export type IOrderFulfillmentsStruct = {
  nftFullfillments: INFTStruct[];
  ftFullfillments: IFTStruct[];
};

export type IOrderFulfillmentsStructOutput = [
  nftFullfillments: INFTStructOutput[],
  ftFullfillments: IFTStructOutput[]
] & {
  nftFullfillments: INFTStructOutput[];
  ftFullfillments: IFTStructOutput[];
};

export declare namespace Data {
  export type SwapPriceStruct = {
    amountOut: BigNumberish;
    amountInMax: BigNumberish;
    tokenContract: AddressLike;
  };

  export type SwapPriceStructOutput = [
    amountOut: bigint,
    amountInMax: bigint,
    tokenContract: string
  ] & { amountOut: bigint; amountInMax: bigint; tokenContract: string };

  export type SwapInfoStruct = {
    prices: Data.SwapPriceStruct[];
    paymentToken: AddressLike;
    paymentMax: BigNumberish;
  };

  export type SwapInfoStructOutput = [
    prices: Data.SwapPriceStructOutput[],
    paymentToken: string,
    paymentMax: bigint
  ] & {
    prices: Data.SwapPriceStructOutput[];
    paymentToken: string;
    paymentMax: bigint;
  };

  export type DomainPriceInfoStruct = {
    price: BigNumberish;
    tokenContract: AddressLike;
  };

  export type DomainPriceInfoStructOutput = [
    price: bigint,
    tokenContract: string
  ] & { price: bigint; tokenContract: string };
}

export interface BatchPurchaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approvedPairs"
      | "batchCheckApprovalERC20"
      | "batchCheckApprovalERC721orERC1155"
      | "defaultSwapFee"
      | "fulfillAvailableAdvancedListingOrders"
      | "fulfillAvailableAdvancedListingOrdersERC20"
      | "fulfillAvailableAdvancedOfferOrders"
      | "getIndividualPrice"
      | "getTotalPrice"
      | "owner"
      | "renounceOwnership"
      | "setSpecificSwapFee"
      | "specificSwapFee"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "approvedPairs",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckApprovalERC20",
    values: [IFTStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckApprovalERC721orERC1155",
    values: [INFTStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedListingOrders",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[][],
      FulfillmentComponentStruct[][],
      Data.SwapInfoStruct,
      BytesLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedListingOrdersERC20",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[][],
      FulfillmentComponentStruct[][],
      Data.SwapInfoStruct,
      BytesLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedOfferOrders",
    values: [
      AdvancedOrderStruct[],
      CriteriaResolverStruct[],
      FulfillmentComponentStruct[][],
      FulfillmentComponentStruct[][],
      IOrderFulfillmentsStruct,
      BytesLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndividualPrice",
    values: [Data.DomainPriceInfoStruct[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [Data.DomainPriceInfoStruct[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSpecificSwapFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "specificSwapFee",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckApprovalERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckApprovalERC721orERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedListingOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedListingOrdersERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedOfferOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndividualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpecificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchPurchase extends BaseContract {
  connect(runner?: ContractRunner | null): BatchPurchase;
  waitForDeployment(): Promise<this>;

  interface: BatchPurchaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approvedPairs: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  batchCheckApprovalERC20: TypedContractMethod<
    [tokens: IFTStruct[]],
    [boolean[]],
    "view"
  >;

  batchCheckApprovalERC721orERC1155: TypedContractMethod<
    [tokens: INFTStruct[]],
    [boolean[]],
    "view"
  >;

  defaultSwapFee: TypedContractMethod<[], [bigint], "view">;

  fulfillAvailableAdvancedListingOrders: TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      swapInfo: Data.SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "payable"
  >;

  fulfillAvailableAdvancedListingOrdersERC20: TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      swapInfo: Data.SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fulfillAvailableAdvancedOfferOrders: TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      orderFulfillments: IOrderFulfillmentsStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getIndividualPrice: TypedContractMethod<
    [prices: Data.DomainPriceInfoStruct[], paymentToken: AddressLike],
    [bigint[]],
    "nonpayable"
  >;

  getTotalPrice: TypedContractMethod<
    [prices: Data.DomainPriceInfoStruct[], paymentToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSpecificSwapFee: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, swapFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  specificSwapFee: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approvedPairs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCheckApprovalERC20"
  ): TypedContractMethod<[tokens: IFTStruct[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "batchCheckApprovalERC721orERC1155"
  ): TypedContractMethod<[tokens: INFTStruct[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "defaultSwapFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fulfillAvailableAdvancedListingOrders"
  ): TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      swapInfo: Data.SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fulfillAvailableAdvancedListingOrdersERC20"
  ): TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      swapInfo: Data.SwapInfoStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillAvailableAdvancedOfferOrders"
  ): TypedContractMethod<
    [
      advancedOrders: AdvancedOrderStruct[],
      criteriaResolvers: CriteriaResolverStruct[],
      offerFulfillments: FulfillmentComponentStruct[][],
      considerationFulfillments: FulfillmentComponentStruct[][],
      orderFulfillments: IOrderFulfillmentsStruct,
      fulfillerConduitKey: BytesLike,
      recipient: AddressLike,
      maximumFulfilled: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getIndividualPrice"
  ): TypedContractMethod<
    [prices: Data.DomainPriceInfoStruct[], paymentToken: AddressLike],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTotalPrice"
  ): TypedContractMethod<
    [prices: Data.DomainPriceInfoStruct[], paymentToken: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSpecificSwapFee"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, swapFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "specificSwapFee"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
