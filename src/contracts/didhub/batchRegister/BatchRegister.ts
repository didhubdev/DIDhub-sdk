/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Data {
  export type DomainInfoStruct = { name: string; duration: BigNumberish };

  export type DomainInfoStructOutput = [name: string, duration: bigint] & {
    name: string;
    duration: bigint;
  };

  export type RegistrationInfoStruct = {
    project: AddressLike;
    domains: Data.DomainInfoStruct[];
    paymentToken: AddressLike;
    paymentMax: BigNumberish;
    owner: AddressLike;
    secret: BytesLike;
    params: BytesLike;
  };

  export type RegistrationInfoStructOutput = [
    project: string,
    domains: Data.DomainInfoStructOutput[],
    paymentToken: string,
    paymentMax: bigint,
    owner: string,
    secret: string,
    params: string
  ] & {
    project: string;
    domains: Data.DomainInfoStructOutput[];
    paymentToken: string;
    paymentMax: bigint;
    owner: string;
    secret: string;
    params: string;
  };

  export type AvalibilityStatusResponseStruct = {
    project: AddressLike;
    status: boolean[];
  };

  export type AvalibilityStatusResponseStructOutput = [
    project: string,
    status: boolean[]
  ] & { project: string; status: boolean[] };

  export type CommitmentInfoStruct = {
    project: AddressLike;
    commitments: BytesLike[];
  };

  export type CommitmentInfoStructOutput = [
    project: string,
    commitments: string[]
  ] & { project: string; commitments: string[] };

  export type CommitmentStatusResponseStruct = {
    project: AddressLike;
    status: BigNumberish[];
  };

  export type CommitmentStatusResponseStructOutput = [
    project: string,
    status: bigint[]
  ] & { project: string; status: bigint[] };

  export type RegistrationStatusResponseStruct = {
    project: AddressLike;
    status: boolean[];
  };

  export type RegistrationStatusResponseStructOutput = [
    project: string,
    status: boolean[]
  ] & { project: string; status: boolean[] };

  export type DurationInfoStruct = { project: AddressLike; names: string[] };

  export type DurationInfoStructOutput = [project: string, names: string[]] & {
    project: string;
    names: string[];
  };

  export type DurationResponseStruct = {
    project: AddressLike;
    duration: BigNumberish[];
  };

  export type DurationResponseStructOutput = [
    project: string,
    duration: bigint[]
  ] & { project: string; duration: bigint[] };

  export type RenewInfoStruct = {
    project: AddressLike;
    domains: Data.DomainInfoStruct[];
    paymentToken: AddressLike;
    paymentMax: BigNumberish;
    params: BytesLike;
  };

  export type RenewInfoStructOutput = [
    project: string,
    domains: Data.DomainInfoStructOutput[],
    paymentToken: string,
    paymentMax: bigint,
    params: string
  ] & {
    project: string;
    domains: Data.DomainInfoStructOutput[];
    paymentToken: string;
    paymentMax: bigint;
    params: string;
  };

  export type PriceRequestStruct = {
    project: AddressLike;
    domains: Data.DomainInfoStruct[];
  };

  export type PriceRequestStructOutput = [
    project: string,
    domains: Data.DomainInfoStructOutput[]
  ] & { project: string; domains: Data.DomainInfoStructOutput[] };

  export type DomainPriceInfoStruct = {
    price: BigNumberish;
    tokenContract: AddressLike;
  };

  export type DomainPriceInfoStructOutput = [
    price: bigint,
    tokenContract: string
  ] & { price: bigint; tokenContract: string };

  export type ProjectPriceResponseStruct = {
    project: AddressLike;
    prices: Data.DomainPriceInfoStruct[];
  };

  export type ProjectPriceResponseStructOutput = [
    project: string,
    prices: Data.DomainPriceInfoStructOutput[]
  ] & { project: string; prices: Data.DomainPriceInfoStructOutput[] };
}

export interface BatchRegisterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveToken"
      | "approvedPairs"
      | "approvedTokens"
      | "batchCheckAvailability"
      | "batchCheckCommitments"
      | "batchCheckRegistration"
      | "batchCommit"
      | "batchGetDuration"
      | "batchMakeCommitment"
      | "batchRegister"
      | "batchRegisterERC20"
      | "batchRenew"
      | "batchRenewERC20"
      | "defaultSwapFee"
      | "feeBasisPt"
      | "getIndividualPrices"
      | "getTotalPrice"
      | "owner"
      | "registrarProxies"
      | "renounceOwnership"
      | "setRegistrarProxy"
      | "setSpecificSwapFee"
      | "specificSwapFee"
      | "transferOwnership"
      | "updateFeePercentage"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BatchRegisterDomain" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedPairs",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckAvailability",
    values: [Data.RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckCommitments",
    values: [Data.CommitmentInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckRegistration",
    values: [Data.RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCommit",
    values: [Data.CommitmentInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetDuration",
    values: [Data.DurationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMakeCommitment",
    values: [Data.RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegister",
    values: [Data.RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegisterERC20",
    values: [Data.RegistrationInfoStruct[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRenew",
    values: [Data.RenewInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRenewERC20",
    values: [Data.RenewInfoStruct[], AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeBasisPt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndividualPrices",
    values: [Data.PriceRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [Data.PriceRequestStruct[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrarProxies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrarProxy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpecificSwapFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "specificSwapFee",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMakeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRegisterERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchRenew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRenewERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBasisPt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIndividualPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrarProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrarProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpecificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specificSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BatchRegisterDomainEvent {
  export type InputTuple = [
    sender: AddressLike,
    names: string[],
    durations: BigNumberish[]
  ];
  export type OutputTuple = [
    sender: string,
    names: string[],
    durations: bigint[]
  ];
  export interface OutputObject {
    sender: string;
    names: string[];
    durations: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchRegister extends BaseContract {
  connect(runner?: ContractRunner | null): BatchRegister;
  waitForDeployment(): Promise<this>;

  interface: BatchRegisterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveToken: TypedContractMethod<
    [token: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  approvedPairs: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  approvedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchCheckAvailability: TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.AvalibilityStatusResponseStructOutput[]],
    "view"
  >;

  batchCheckCommitments: TypedContractMethod<
    [commitmentInfo: Data.CommitmentInfoStruct[]],
    [Data.CommitmentStatusResponseStructOutput[]],
    "view"
  >;

  batchCheckRegistration: TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.RegistrationStatusResponseStructOutput[]],
    "view"
  >;

  batchCommit: TypedContractMethod<
    [requests: Data.CommitmentInfoStruct[]],
    [void],
    "nonpayable"
  >;

  batchGetDuration: TypedContractMethod<
    [durationInfo: Data.DurationInfoStruct[]],
    [Data.DurationResponseStructOutput[]],
    "view"
  >;

  batchMakeCommitment: TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.CommitmentInfoStructOutput[]],
    "view"
  >;

  batchRegister: TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [void],
    "payable"
  >;

  batchRegisterERC20: TypedContractMethod<
    [
      requests: Data.RegistrationInfoStruct[],
      paymentToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  batchRenew: TypedContractMethod<
    [requests: Data.RenewInfoStruct[]],
    [void],
    "payable"
  >;

  batchRenewERC20: TypedContractMethod<
    [
      requests: Data.RenewInfoStruct[],
      paymentToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  defaultSwapFee: TypedContractMethod<[], [bigint], "view">;

  feeBasisPt: TypedContractMethod<[], [bigint], "view">;

  getIndividualPrices: TypedContractMethod<
    [requests: Data.PriceRequestStruct[]],
    [Data.ProjectPriceResponseStructOutput[]],
    "view"
  >;

  getTotalPrice: TypedContractMethod<
    [requests: Data.PriceRequestStruct[], paymentToken: AddressLike],
    [bigint[]],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registrarProxies: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setRegistrarProxy: TypedContractMethod<
    [project: AddressLike, registrarProxy: AddressLike],
    [void],
    "nonpayable"
  >;

  setSpecificSwapFee: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, swapFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  specificSwapFee: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeePercentage: TypedContractMethod<
    [_feeBasisPt: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveToken"
  ): TypedContractMethod<
    [token: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approvedPairs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "approvedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchCheckAvailability"
  ): TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.AvalibilityStatusResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCheckCommitments"
  ): TypedContractMethod<
    [commitmentInfo: Data.CommitmentInfoStruct[]],
    [Data.CommitmentStatusResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCheckRegistration"
  ): TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.RegistrationStatusResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchCommit"
  ): TypedContractMethod<
    [requests: Data.CommitmentInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchGetDuration"
  ): TypedContractMethod<
    [durationInfo: Data.DurationInfoStruct[]],
    [Data.DurationResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchMakeCommitment"
  ): TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [Data.CommitmentInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchRegister"
  ): TypedContractMethod<
    [requests: Data.RegistrationInfoStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchRegisterERC20"
  ): TypedContractMethod<
    [
      requests: Data.RegistrationInfoStruct[],
      paymentToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchRenew"
  ): TypedContractMethod<[requests: Data.RenewInfoStruct[]], [void], "payable">;
  getFunction(
    nameOrSignature: "batchRenewERC20"
  ): TypedContractMethod<
    [
      requests: Data.RenewInfoStruct[],
      paymentToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultSwapFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeBasisPt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIndividualPrices"
  ): TypedContractMethod<
    [requests: Data.PriceRequestStruct[]],
    [Data.ProjectPriceResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalPrice"
  ): TypedContractMethod<
    [requests: Data.PriceRequestStruct[], paymentToken: AddressLike],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registrarProxies"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRegistrarProxy"
  ): TypedContractMethod<
    [project: AddressLike, registrarProxy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpecificSwapFee"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, swapFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "specificSwapFee"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeePercentage"
  ): TypedContractMethod<[_feeBasisPt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BatchRegisterDomain"
  ): TypedContractEvent<
    BatchRegisterDomainEvent.InputTuple,
    BatchRegisterDomainEvent.OutputTuple,
    BatchRegisterDomainEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BatchRegisterDomain(address,string[],uint256[])": TypedContractEvent<
      BatchRegisterDomainEvent.InputTuple,
      BatchRegisterDomainEvent.OutputTuple,
      BatchRegisterDomainEvent.OutputObject
    >;
    BatchRegisterDomain: TypedContractEvent<
      BatchRegisterDomainEvent.InputTuple,
      BatchRegisterDomainEvent.OutputTuple,
      BatchRegisterDomainEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
