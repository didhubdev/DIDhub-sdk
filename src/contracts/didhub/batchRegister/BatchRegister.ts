/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export type DomainInfoStruct = { name: string; duration: BigNumberish };

export type DomainInfoStructOutput = [string, BigNumber] & {
  name: string;
  duration: BigNumber;
};

export type RegistrationInfoStruct = {
  project: string;
  domains: DomainInfoStruct[];
  paymentToken: string;
  paymentMax: BigNumberish;
  owner: string;
  secret: BytesLike;
  params: BytesLike;
};

export type RegistrationInfoStructOutput = [
  string,
  DomainInfoStructOutput[],
  string,
  BigNumber,
  string,
  string,
  string
] & {
  project: string;
  domains: DomainInfoStructOutput[];
  paymentToken: string;
  paymentMax: BigNumber;
  owner: string;
  secret: string;
  params: string;
};

export type AvalibilityStatusResponseStruct = {
  project: string;
  status: boolean[];
};

export type AvalibilityStatusResponseStructOutput = [string, boolean[]] & {
  project: string;
  status: boolean[];
};

export type CommitmentInfoStruct = {
  project: string;
  commitments: BytesLike[];
};

export type CommitmentInfoStructOutput = [string, string[]] & {
  project: string;
  commitments: string[];
};

export type CommitmentStatusResponseStruct = {
  project: string;
  status: BigNumberish[];
};

export type CommitmentStatusResponseStructOutput = [string, number[]] & {
  project: string;
  status: number[];
};

export type RegistrationStatusResponseStruct = {
  project: string;
  status: boolean[];
};

export type RegistrationStatusResponseStructOutput = [string, boolean[]] & {
  project: string;
  status: boolean[];
};

export type DurationInfoStruct = { project: string; names: string[] };

export type DurationInfoStructOutput = [string, string[]] & {
  project: string;
  names: string[];
};

export type DurationResponseStruct = {
  project: string;
  duration: BigNumberish[];
};

export type DurationResponseStructOutput = [string, BigNumber[]] & {
  project: string;
  duration: BigNumber[];
};

export type RenewInfoStruct = {
  project: string;
  domains: DomainInfoStruct[];
  paymentToken: string;
  paymentMax: BigNumberish;
  params: BytesLike;
};

export type RenewInfoStructOutput = [
  string,
  DomainInfoStructOutput[],
  string,
  BigNumber,
  string
] & {
  project: string;
  domains: DomainInfoStructOutput[];
  paymentToken: string;
  paymentMax: BigNumber;
  params: string;
};

export type PriceRequestStruct = {
  project: string;
  domains: DomainInfoStruct[];
};

export type PriceRequestStructOutput = [string, DomainInfoStructOutput[]] & {
  project: string;
  domains: DomainInfoStructOutput[];
};

export type DomainPriceInfoStruct = {
  price: BigNumberish;
  tokenContract: string;
};

export type DomainPriceInfoStructOutput = [BigNumber, string] & {
  price: BigNumber;
  tokenContract: string;
};

export type ProjectPriceResponseStruct = {
  project: string;
  prices: DomainPriceInfoStruct[];
};

export type ProjectPriceResponseStructOutput = [
  string,
  DomainPriceInfoStructOutput[]
] & { project: string; prices: DomainPriceInfoStructOutput[] };

export interface BatchRegisterInterface extends utils.Interface {
  functions: {
    "approveToken(address,bool)": FunctionFragment;
    "approvedPairs(address,address)": FunctionFragment;
    "approvedTokens(address)": FunctionFragment;
    "batchCheckAvailability((address,(string,uint256)[],address,uint256,address,bytes32,bytes)[])": FunctionFragment;
    "batchCheckCommitments((address,bytes32[])[])": FunctionFragment;
    "batchCheckRegistration((address,(string,uint256)[],address,uint256,address,bytes32,bytes)[])": FunctionFragment;
    "batchCommit((address,bytes32[])[])": FunctionFragment;
    "batchGetDuration((address,string[])[])": FunctionFragment;
    "batchMakeCommitment((address,(string,uint256)[],address,uint256,address,bytes32,bytes)[])": FunctionFragment;
    "batchRegister((address,(string,uint256)[],address,uint256,address,bytes32,bytes)[])": FunctionFragment;
    "batchRegisterERC20((address,(string,uint256)[],address,uint256,address,bytes32,bytes)[],address,uint256)": FunctionFragment;
    "batchRenew((address,(string,uint256)[],address,uint256,bytes)[])": FunctionFragment;
    "batchRenewERC20((address,(string,uint256)[],address,uint256,bytes)[],address,uint256)": FunctionFragment;
    "feeBasisPt()": FunctionFragment;
    "feeContract()": FunctionFragment;
    "feeFixed()": FunctionFragment;
    "getIndividualPrices((address,(string,uint256)[])[])": FunctionFragment;
    "getTotalPrice((address,(string,uint256)[])[],address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registrarProxies(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRegistrarProxy(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeFixed(address,uint256)": FunctionFragment;
    "updateFeePercentage(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedPairs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckAvailability",
    values: [RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckCommitments",
    values: [CommitmentInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCheckRegistration",
    values: [RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCommit",
    values: [CommitmentInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetDuration",
    values: [DurationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMakeCommitment",
    values: [RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegister",
    values: [RegistrationInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRegisterERC20",
    values: [RegistrationInfoStruct[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRenew",
    values: [RenewInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRenewERC20",
    values: [RenewInfoStruct[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBasisPt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeFixed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIndividualPrices",
    values: [PriceRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [PriceRequestStruct[], string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registrarProxies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrarProxy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeFixed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCheckRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMakeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRegisterERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchRenew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRenewERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBasisPt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeFixed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIndividualPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registrarProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrarProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeFixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BatchRegisterDomain(address,string[],uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchRegisterDomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BatchRegisterDomainEvent = TypedEvent<
  [string, string[], BigNumber[]],
  { sender: string; names: string[]; durations: BigNumber[] }
>;

export type BatchRegisterDomainEventFilter =
  TypedEventFilter<BatchRegisterDomainEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BatchRegister extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchRegisterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveToken(
      token: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    batchCheckAvailability(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[AvalibilityStatusResponseStructOutput[]]>;

    batchCheckCommitments(
      commitmentInfo: CommitmentInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[CommitmentStatusResponseStructOutput[]]>;

    batchCheckRegistration(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[RegistrationStatusResponseStructOutput[]]>;

    batchCommit(
      requests: CommitmentInfoStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchGetDuration(
      durationInfo: DurationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[DurationResponseStructOutput[]]>;

    batchMakeCommitment(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<[CommitmentInfoStructOutput[]]>;

    batchRegister(
      requests: RegistrationInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRegisterERC20(
      requests: RegistrationInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRenew(
      requests: RenewInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchRenewERC20(
      requests: RenewInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeBasisPt(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeContract(overrides?: CallOverrides): Promise<[string]>;

    feeFixed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIndividualPrices(
      requests: PriceRequestStruct[],
      overrides?: CallOverrides
    ): Promise<[ProjectPriceResponseStructOutput[]]>;

    getTotalPrice(
      requests: PriceRequestStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registrarProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistrarProxy(
      project: string,
      registrarProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeFixed(
      _feeContract: string,
      _feeFixed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeePercentage(
      _feeBasisPt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveToken(
    token: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedPairs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  batchCheckAvailability(
    requests: RegistrationInfoStruct[],
    overrides?: CallOverrides
  ): Promise<AvalibilityStatusResponseStructOutput[]>;

  batchCheckCommitments(
    commitmentInfo: CommitmentInfoStruct[],
    overrides?: CallOverrides
  ): Promise<CommitmentStatusResponseStructOutput[]>;

  batchCheckRegistration(
    requests: RegistrationInfoStruct[],
    overrides?: CallOverrides
  ): Promise<RegistrationStatusResponseStructOutput[]>;

  batchCommit(
    requests: CommitmentInfoStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchGetDuration(
    durationInfo: DurationInfoStruct[],
    overrides?: CallOverrides
  ): Promise<DurationResponseStructOutput[]>;

  batchMakeCommitment(
    requests: RegistrationInfoStruct[],
    overrides?: CallOverrides
  ): Promise<CommitmentInfoStructOutput[]>;

  batchRegister(
    requests: RegistrationInfoStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRegisterERC20(
    requests: RegistrationInfoStruct[],
    paymentToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRenew(
    requests: RenewInfoStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchRenewERC20(
    requests: RenewInfoStruct[],
    paymentToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeBasisPt(overrides?: CallOverrides): Promise<BigNumber>;

  feeContract(overrides?: CallOverrides): Promise<string>;

  feeFixed(overrides?: CallOverrides): Promise<BigNumber>;

  getIndividualPrices(
    requests: PriceRequestStruct[],
    overrides?: CallOverrides
  ): Promise<ProjectPriceResponseStructOutput[]>;

  getTotalPrice(
    requests: PriceRequestStruct[],
    paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registrarProxies(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistrarProxy(
    project: string,
    registrarProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeFixed(
    _feeContract: string,
    _feeFixed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeePercentage(
    _feeBasisPt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveToken(
      token: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    batchCheckAvailability(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<AvalibilityStatusResponseStructOutput[]>;

    batchCheckCommitments(
      commitmentInfo: CommitmentInfoStruct[],
      overrides?: CallOverrides
    ): Promise<CommitmentStatusResponseStructOutput[]>;

    batchCheckRegistration(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<RegistrationStatusResponseStructOutput[]>;

    batchCommit(
      requests: CommitmentInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchGetDuration(
      durationInfo: DurationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<DurationResponseStructOutput[]>;

    batchMakeCommitment(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<CommitmentInfoStructOutput[]>;

    batchRegister(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRegisterERC20(
      requests: RegistrationInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchRenew(
      requests: RenewInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchRenewERC20(
      requests: RenewInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeBasisPt(overrides?: CallOverrides): Promise<BigNumber>;

    feeContract(overrides?: CallOverrides): Promise<string>;

    feeFixed(overrides?: CallOverrides): Promise<BigNumber>;

    getIndividualPrices(
      requests: PriceRequestStruct[],
      overrides?: CallOverrides
    ): Promise<ProjectPriceResponseStructOutput[]>;

    getTotalPrice(
      requests: PriceRequestStruct[],
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    registrarProxies(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRegistrarProxy(
      project: string,
      registrarProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeFixed(
      _feeContract: string,
      _feeFixed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeePercentage(
      _feeBasisPt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BatchRegisterDomain(address,string[],uint256[])"(
      sender?: string | null,
      names?: null,
      durations?: null
    ): BatchRegisterDomainEventFilter;
    BatchRegisterDomain(
      sender?: string | null,
      names?: null,
      durations?: null
    ): BatchRegisterDomainEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approveToken(
      token: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchCheckAvailability(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCheckCommitments(
      commitmentInfo: CommitmentInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCheckRegistration(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchCommit(
      requests: CommitmentInfoStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchGetDuration(
      durationInfo: DurationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchMakeCommitment(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchRegister(
      requests: RegistrationInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRegisterERC20(
      requests: RegistrationInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRenew(
      requests: RenewInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchRenewERC20(
      requests: RenewInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeBasisPt(overrides?: CallOverrides): Promise<BigNumber>;

    feeContract(overrides?: CallOverrides): Promise<BigNumber>;

    feeFixed(overrides?: CallOverrides): Promise<BigNumber>;

    getIndividualPrices(
      requests: PriceRequestStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalPrice(
      requests: PriceRequestStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registrarProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistrarProxy(
      project: string,
      registrarProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeFixed(
      _feeContract: string,
      _feeFixed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeePercentage(
      _feeBasisPt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveToken(
      token: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCheckAvailability(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCheckCommitments(
      commitmentInfo: CommitmentInfoStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCheckRegistration(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchCommit(
      requests: CommitmentInfoStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchGetDuration(
      durationInfo: DurationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchMakeCommitment(
      requests: RegistrationInfoStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchRegister(
      requests: RegistrationInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRegisterERC20(
      requests: RegistrationInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRenew(
      requests: RenewInfoStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchRenewERC20(
      requests: RenewInfoStruct[],
      paymentToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeBasisPt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeFixed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIndividualPrices(
      requests: PriceRequestStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPrice(
      requests: PriceRequestStruct[],
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrarProxies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistrarProxy(
      project: string,
      registrarProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeFixed(
      _feeContract: string,
      _feeFixed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeePercentage(
      _feeBasisPt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
