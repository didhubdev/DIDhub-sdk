/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BatchENSManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchUnwrap"
      | "batchWrap"
      | "fixedFee"
      | "hasApproval"
      | "hasApprovalNameWrapper"
      | "isWrapped"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "setFixedFee"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "batchUnwrap",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWrap",
    values: [BigNumberish[], BytesLike[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "fixedFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasApproval",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasApprovalNameWrapper",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrapped",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFixedFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchUnwrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchWrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasApprovalNameWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWrapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchENSManager extends BaseContract {
  connect(runner?: ContractRunner | null): BatchENSManager;
  waitForDeployment(): Promise<this>;

  interface: BatchENSManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchUnwrap: TypedContractMethod<
    [tokenIds: BigNumberish[], recipient: AddressLike],
    [void],
    "payable"
  >;

  batchWrap: TypedContractMethod<
    [tokenIds: BigNumberish[], datas: BytesLike[], owner: AddressLike],
    [void],
    "payable"
  >;

  fixedFee: TypedContractMethod<[], [bigint], "view">;

  hasApproval: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  hasApprovalNameWrapper: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  isWrapped: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFixedFee: TypedContractMethod<
    [_fixedFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchUnwrap"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "batchWrap"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], datas: BytesLike[], owner: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fixedFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasApproval"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "hasApprovalNameWrapper"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "isWrapped"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFixedFee"
  ): TypedContractMethod<[_fixedFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
